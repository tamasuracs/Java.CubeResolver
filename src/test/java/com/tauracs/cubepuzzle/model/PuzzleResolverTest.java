package com.tauracs.cubepuzzle.model;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.logging.Logger;
import org.junit.Test;
import com.tauracs.cubepuzzle.model.PuzzlePiece;
import com.tauracs.cubepuzzle.model.PuzzleResolver;

/**
 * Class checking the Puzzle Resolving
 */
public class PuzzleResolverTest extends TestBase {
	
	private PuzzleResolver _resolver = new PuzzleResolver();

	@Test
	public void TestCase01_Cube_against_one_complete_puzzle_piece() {
		
		ArrayList<PuzzlePiece> blocks = new ArrayList<PuzzlePiece>();
		blocks.add(PuzzlePieceTests.COMPLETE);
		boolean result = _resolver.resolve(blocks);		
		assertTrue("System did not resolve ", result);		
	}
	
	@Test
	public void TestCase02_Cube_against_two_complete_puzzle_piece() {		
		ArrayList<PuzzlePiece> blocks = new ArrayList<PuzzlePiece>();
		blocks.add(PuzzlePieceTests.COMPLETE);
		blocks.add((PuzzlePiece)PuzzlePieceTests.COMPLETE.clone());
		boolean result = _resolver.resolve(blocks);		
		assertTrue("System did not resolve ", result);		
	}
	
	@Test
	public void TestCase03_Cube_against_BLUE_puzzle_pieces() {
		
		 PuzzlePiece block1 = new PuzzlePiece(
					new char[][]{
							{' ',' ','*',' ',' '},
							{' ','*','*','*',' '},
							{'*','*','*','*','*'},
							{' ','*','*','*',' '},
							{' ',' ','*',' ',' '}
					}
				);
		 
		 PuzzlePiece block2 = new PuzzlePiece(
					new char[][]{
							{'*',' ','*',' ','*'},
							{'*','*','*','*','*'},
							{' ','*','*','*',' '},
							{'*','*','*','*','*'},
							{'*',' ','*',' ','*'},
					}
				);
		 
		 PuzzlePiece block3 = new PuzzlePiece(
					new char[][]{
							{' ',' ','*',' ',' '},
							{' ','*','*','*','*'},
							{'*','*','*','*',' '},
							{' ','*','*','*','*'},
							{' ',' ','*',' ',' '},
					}
				);
		 
		 PuzzlePiece block4 = new PuzzlePiece(
					new char[][]{
							{' ','*',' ','*',' '},
							{'*','*','*','*',' '},
							{' ','*','*','*','*'},
							{'*','*','*','*',' '},
							{'*','*',' ','*',' '},
					}
				);
		 
		 PuzzlePiece block5 = new PuzzlePiece(
					new char[][]{
							{' ','*',' ','*',' '},
							{'*','*','*','*','*'},
							{' ','*','*','*',' '},
							{'*','*','*','*','*'},
							{'*',' ','*',' ',' '},
					}
				);
		 
		 PuzzlePiece block6 = new PuzzlePiece(
					new char[][]{
							{' ','*',' ','*',' '},
							{' ','*','*','*','*'},
							{'*','*','*','*',' '},
							{' ','*','*','*','*'},
							{'*','*',' ','*','*'},
					}
				);
		
		ArrayList<PuzzlePiece> blocks = new ArrayList<PuzzlePiece>();
		blocks.add(block1);
		blocks.add(block2);
		blocks.add(block3);
		blocks.add(block4);
		blocks.add(block5);
		blocks.add(block6);		
		boolean result = _resolver.resolve(blocks);
		assertTrue("System did not resolve ", result);
		
		Logger.getGlobal().info(String.format("\n\nSolution generated by to360String():\n\n%s",_resolver.to360TString()));
	}
}
